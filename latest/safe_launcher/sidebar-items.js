initSidebarItems({"macro":[["eval_break!","This macro is intended to be used in all cases where we get Result<T, U> and want to print a debug information about it and break out of some loop, for e.g. an event loop"],["eval_send_one!","This macro is intended to be used in all cases where we get an Err out of Result<T, U> and want to send it to a single `std::sync::mpsc::Sender<Result<T, U>>`, for e.g.  an observer, and subsequently return from the function. Additionally it will purge all the dead observers (i.e. those no longer existing or interested in observing)."],["ffi_try!","This macro is intended to be used in all cases where we get Result<T, U> and want to convert it to C friendly error code to inform about error conditions accross library boundaries"],["group_send!","This macro is intended to be used in all cases when we want to send a value to a group (Vector) of `std::sync::mpsc::Sender<T>`, for e.g. an observer pattern with senders. It performs necessary trait conversion for sending the given data if such a conversion was defined. Additionally it will purge all the dead observers (i.e. those no longer existing or interested in observing)."],["parse_option!","This macro is intended to be used in all cases where we get a None out of Option<T> and want to package it into `safe_launcher::errors::LauncherError::SpecificParseError(String)`. This is useful because there may be miscellaneous erros while parsing through a valid JSON due to JSON not conforming to certain mandatory requirements. This can then be communicated back to the JSON sending client."],["parse_result!","This macro is intended to be used in all cases where we get an Err out of Result<T, U> and want to package it into `safe_launcher::errors::LauncherError::SpecificParseError(String)`. This is useful because there may be miscellaneous erros while parsing through a valid JSON due to JSON not conforming to certain mandatory requirements. This can then be communicated back to the JSON sending client."],["send_one!","This macro is intended to be used in all cases when we want to send a value to a single `std::sync::mpsc::Sender<T>`, for e.g. an observer. It performs necessary trait conversion for sending the given data if such a conversion was defined."]],"mod":[["errors","Safe-Launcher Errors."],["event_sender","Mechanisms to help with event-subsetting."],["ffi","FFI interface."],["launcher","The gateway to the Launcher core modules. It consumes `safe_core::client::Client` and is a packet that must be held for the duration the core library is activated."],["observer","Since the entire core library is purely event driven, this module provides types and primitives that an interfacing crate (executable or another library) should make use of to easily tap into the information and events of interest happening in the core."]]});